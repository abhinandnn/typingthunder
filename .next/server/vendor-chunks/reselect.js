"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/reselect";
exports.ids = ["vendor-chunks/reselect"];
exports.modules = {

/***/ "(ssr)/./node_modules/reselect/dist/reselect.mjs":
/*!*************************************************!*\
  !*** ./node_modules/reselect/dist/reselect.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSelector: () => (/* binding */ createSelector),\n/* harmony export */   createSelectorCreator: () => (/* binding */ createSelectorCreator),\n/* harmony export */   createStructuredSelector: () => (/* binding */ createStructuredSelector),\n/* harmony export */   lruMemoize: () => (/* binding */ lruMemoize),\n/* harmony export */   referenceEqualityCheck: () => (/* binding */ referenceEqualityCheck),\n/* harmony export */   setGlobalDevModeChecks: () => (/* binding */ setGlobalDevModeChecks),\n/* harmony export */   unstable_autotrackMemoize: () => (/* binding */ autotrackMemoize),\n/* harmony export */   weakMapMemoize: () => (/* binding */ weakMapMemoize)\n/* harmony export */ });\n// src/devModeChecks/identityFunctionCheck.ts\nvar runIdentityFunctionCheck = (resultFunc, inputSelectorsResults, outputSelectorResult)=>{\n    if (inputSelectorsResults.length === 1 && inputSelectorsResults[0] === outputSelectorResult) {\n        let isInputSameAsOutput = false;\n        try {\n            const emptyObject = {};\n            if (resultFunc(emptyObject) === emptyObject) isInputSameAsOutput = true;\n        } catch  {}\n        if (isInputSameAsOutput) {\n            let stack = void 0;\n            try {\n                throw new Error();\n            } catch (e) {\n                ;\n                ({ stack } = e);\n            }\n            console.warn(\"The result function returned its own inputs without modification. e.g\\n`createSelector([state => state.todos], todos => todos)`\\nThis could lead to inefficient memoization and unnecessary re-renders.\\nEnsure transformation logic is in the result function, and extraction logic is in the input selectors.\", {\n                stack\n            });\n        }\n    }\n};\n// src/devModeChecks/inputStabilityCheck.ts\nvar runInputStabilityCheck = (inputSelectorResultsObject, options, inputSelectorArgs)=>{\n    const { memoize, memoizeOptions } = options;\n    const { inputSelectorResults, inputSelectorResultsCopy } = inputSelectorResultsObject;\n    const createAnEmptyObject = memoize(()=>({}), ...memoizeOptions);\n    const areInputSelectorResultsEqual = createAnEmptyObject.apply(null, inputSelectorResults) === createAnEmptyObject.apply(null, inputSelectorResultsCopy);\n    if (!areInputSelectorResultsEqual) {\n        let stack = void 0;\n        try {\n            throw new Error();\n        } catch (e) {\n            ;\n            ({ stack } = e);\n        }\n        console.warn(\"An input selector returned a different result when passed same arguments.\\nThis means your output selector will likely run more frequently than intended.\\nAvoid returning a new reference inside your input selector, e.g.\\n`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)`\", {\n            arguments: inputSelectorArgs,\n            firstInputs: inputSelectorResults,\n            secondInputs: inputSelectorResultsCopy,\n            stack\n        });\n    }\n};\n// src/devModeChecks/setGlobalDevModeChecks.ts\nvar globalDevModeChecks = {\n    inputStabilityCheck: \"once\",\n    identityFunctionCheck: \"once\"\n};\nvar setGlobalDevModeChecks = (devModeChecks)=>{\n    Object.assign(globalDevModeChecks, devModeChecks);\n};\n// src/utils.ts\nvar NOT_FOUND = \"NOT_FOUND\";\nfunction assertIsFunction(func, errorMessage = `expected a function, instead received ${typeof func}`) {\n    if (typeof func !== \"function\") {\n        throw new TypeError(errorMessage);\n    }\n}\nfunction assertIsObject(object, errorMessage = `expected an object, instead received ${typeof object}`) {\n    if (typeof object !== \"object\") {\n        throw new TypeError(errorMessage);\n    }\n}\nfunction assertIsArrayOfFunctions(array, errorMessage = `expected all items to be functions, instead received the following types: `) {\n    if (!array.every((item)=>typeof item === \"function\")) {\n        const itemTypes = array.map((item)=>typeof item === \"function\" ? `function ${item.name || \"unnamed\"}()` : typeof item).join(\", \");\n        throw new TypeError(`${errorMessage}[${itemTypes}]`);\n    }\n}\nvar ensureIsArray = (item)=>{\n    return Array.isArray(item) ? item : [\n        item\n    ];\n};\nfunction getDependencies(createSelectorArgs) {\n    const dependencies = Array.isArray(createSelectorArgs[0]) ? createSelectorArgs[0] : createSelectorArgs;\n    assertIsArrayOfFunctions(dependencies, `createSelector expects all input-selectors to be functions, but received the following types: `);\n    return dependencies;\n}\nfunction collectInputSelectorResults(dependencies, inputSelectorArgs) {\n    const inputSelectorResults = [];\n    const { length } = dependencies;\n    for(let i = 0; i < length; i++){\n        inputSelectorResults.push(dependencies[i].apply(null, inputSelectorArgs));\n    }\n    return inputSelectorResults;\n}\nvar getDevModeChecksExecutionInfo = (firstRun, devModeChecks)=>{\n    const { identityFunctionCheck, inputStabilityCheck } = {\n        ...globalDevModeChecks,\n        ...devModeChecks\n    };\n    return {\n        identityFunctionCheck: {\n            shouldRun: identityFunctionCheck === \"always\" || identityFunctionCheck === \"once\" && firstRun,\n            run: runIdentityFunctionCheck\n        },\n        inputStabilityCheck: {\n            shouldRun: inputStabilityCheck === \"always\" || inputStabilityCheck === \"once\" && firstRun,\n            run: runInputStabilityCheck\n        }\n    };\n};\n// src/autotrackMemoize/autotracking.ts\nvar $REVISION = 0;\nvar CURRENT_TRACKER = null;\nvar Cell = class {\n    constructor(initialValue, isEqual = tripleEq){\n        this.revision = $REVISION;\n        this._isEqual = tripleEq;\n        this._value = this._lastValue = initialValue;\n        this._isEqual = isEqual;\n    }\n    // Whenever a storage value is read, it'll add itself to the current tracker if\n    // one exists, entangling its state with that cache.\n    get value() {\n        CURRENT_TRACKER?.add(this);\n        return this._value;\n    }\n    // Whenever a storage value is updated, we bump the global revision clock,\n    // assign the revision for this storage to the new value, _and_ we schedule a\n    // rerender. This is important, and it's what makes autotracking  _pull_\n    // based. We don't actively tell the caches which depend on the storage that\n    // anything has happened. Instead, we recompute the caches when needed.\n    set value(newValue) {\n        if (this.value === newValue) return;\n        this._value = newValue;\n        this.revision = ++$REVISION;\n    }\n};\nfunction tripleEq(a, b) {\n    return a === b;\n}\nvar TrackingCache = class {\n    constructor(fn){\n        this._cachedRevision = -1;\n        this._deps = [];\n        this.hits = 0;\n        this.fn = fn;\n    }\n    clear() {\n        this._cachedValue = void 0;\n        this._cachedRevision = -1;\n        this._deps = [];\n        this.hits = 0;\n    }\n    get value() {\n        if (this.revision > this._cachedRevision) {\n            const { fn } = this;\n            const currentTracker = /* @__PURE__ */ new Set();\n            const prevTracker = CURRENT_TRACKER;\n            CURRENT_TRACKER = currentTracker;\n            this._cachedValue = fn();\n            CURRENT_TRACKER = prevTracker;\n            this.hits++;\n            this._deps = Array.from(currentTracker);\n            this._cachedRevision = this.revision;\n        }\n        CURRENT_TRACKER?.add(this);\n        return this._cachedValue;\n    }\n    get revision() {\n        return Math.max(...this._deps.map((d)=>d.revision), 0);\n    }\n};\nfunction getValue(cell) {\n    if (!(cell instanceof Cell)) {\n        console.warn(\"Not a valid cell! \", cell);\n    }\n    return cell.value;\n}\nfunction setValue(storage, value) {\n    if (!(storage instanceof Cell)) {\n        throw new TypeError(\"setValue must be passed a tracked store created with `createStorage`.\");\n    }\n    storage.value = storage._lastValue = value;\n}\nfunction createCell(initialValue, isEqual = tripleEq) {\n    return new Cell(initialValue, isEqual);\n}\nfunction createCache(fn) {\n    assertIsFunction(fn, \"the first parameter to `createCache` must be a function\");\n    return new TrackingCache(fn);\n}\n// src/autotrackMemoize/tracking.ts\nvar neverEq = (a, b)=>false;\nfunction createTag() {\n    return createCell(null, neverEq);\n}\nfunction dirtyTag(tag, value) {\n    setValue(tag, value);\n}\nvar consumeCollection = (node)=>{\n    let tag = node.collectionTag;\n    if (tag === null) {\n        tag = node.collectionTag = createTag();\n    }\n    getValue(tag);\n};\nvar dirtyCollection = (node)=>{\n    const tag = node.collectionTag;\n    if (tag !== null) {\n        dirtyTag(tag, null);\n    }\n};\n// src/autotrackMemoize/proxy.ts\nvar REDUX_PROXY_LABEL = Symbol();\nvar nextId = 0;\nvar proto = Object.getPrototypeOf({});\nvar ObjectTreeNode = class {\n    constructor(value){\n        this.proxy = new Proxy(this, objectProxyHandler);\n        this.tag = createTag();\n        this.tags = {};\n        this.children = {};\n        this.collectionTag = null;\n        this.id = nextId++;\n        this.value = value;\n        this.value = value;\n        this.tag.value = value;\n    }\n};\nvar objectProxyHandler = {\n    get (node, key) {\n        function calculateResult() {\n            const { value } = node;\n            const childValue = Reflect.get(value, key);\n            if (typeof key === \"symbol\") {\n                return childValue;\n            }\n            if (key in proto) {\n                return childValue;\n            }\n            if (typeof childValue === \"object\" && childValue !== null) {\n                let childNode = node.children[key];\n                if (childNode === void 0) {\n                    childNode = node.children[key] = createNode(childValue);\n                }\n                if (childNode.tag) {\n                    getValue(childNode.tag);\n                }\n                return childNode.proxy;\n            } else {\n                let tag = node.tags[key];\n                if (tag === void 0) {\n                    tag = node.tags[key] = createTag();\n                    tag.value = childValue;\n                }\n                getValue(tag);\n                return childValue;\n            }\n        }\n        const res = calculateResult();\n        return res;\n    },\n    ownKeys (node) {\n        consumeCollection(node);\n        return Reflect.ownKeys(node.value);\n    },\n    getOwnPropertyDescriptor (node, prop) {\n        return Reflect.getOwnPropertyDescriptor(node.value, prop);\n    },\n    has (node, prop) {\n        return Reflect.has(node.value, prop);\n    }\n};\nvar ArrayTreeNode = class {\n    constructor(value){\n        this.proxy = new Proxy([\n            this\n        ], arrayProxyHandler);\n        this.tag = createTag();\n        this.tags = {};\n        this.children = {};\n        this.collectionTag = null;\n        this.id = nextId++;\n        this.value = value;\n        this.value = value;\n        this.tag.value = value;\n    }\n};\nvar arrayProxyHandler = {\n    get ([node], key) {\n        if (key === \"length\") {\n            consumeCollection(node);\n        }\n        return objectProxyHandler.get(node, key);\n    },\n    ownKeys ([node]) {\n        return objectProxyHandler.ownKeys(node);\n    },\n    getOwnPropertyDescriptor ([node], prop) {\n        return objectProxyHandler.getOwnPropertyDescriptor(node, prop);\n    },\n    has ([node], prop) {\n        return objectProxyHandler.has(node, prop);\n    }\n};\nfunction createNode(value) {\n    if (Array.isArray(value)) {\n        return new ArrayTreeNode(value);\n    }\n    return new ObjectTreeNode(value);\n}\nfunction updateNode(node, newValue) {\n    const { value, tags, children } = node;\n    node.value = newValue;\n    if (Array.isArray(value) && Array.isArray(newValue) && value.length !== newValue.length) {\n        dirtyCollection(node);\n    } else {\n        if (value !== newValue) {\n            let oldKeysSize = 0;\n            let newKeysSize = 0;\n            let anyKeysAdded = false;\n            for(const _key in value){\n                oldKeysSize++;\n            }\n            for(const key in newValue){\n                newKeysSize++;\n                if (!(key in value)) {\n                    anyKeysAdded = true;\n                    break;\n                }\n            }\n            const isDifferent = anyKeysAdded || oldKeysSize !== newKeysSize;\n            if (isDifferent) {\n                dirtyCollection(node);\n            }\n        }\n    }\n    for(const key in tags){\n        const childValue = value[key];\n        const newChildValue = newValue[key];\n        if (childValue !== newChildValue) {\n            dirtyCollection(node);\n            dirtyTag(tags[key], newChildValue);\n        }\n        if (typeof newChildValue === \"object\" && newChildValue !== null) {\n            delete tags[key];\n        }\n    }\n    for(const key in children){\n        const childNode = children[key];\n        const newChildValue = newValue[key];\n        const childValue = childNode.value;\n        if (childValue === newChildValue) {\n            continue;\n        } else if (typeof newChildValue === \"object\" && newChildValue !== null) {\n            updateNode(childNode, newChildValue);\n        } else {\n            deleteNode(childNode);\n            delete children[key];\n        }\n    }\n}\nfunction deleteNode(node) {\n    if (node.tag) {\n        dirtyTag(node.tag, null);\n    }\n    dirtyCollection(node);\n    for(const key in node.tags){\n        dirtyTag(node.tags[key], null);\n    }\n    for(const key in node.children){\n        deleteNode(node.children[key]);\n    }\n}\n// src/lruMemoize.ts\nfunction createSingletonCache(equals) {\n    let entry;\n    return {\n        get (key) {\n            if (entry && equals(entry.key, key)) {\n                return entry.value;\n            }\n            return NOT_FOUND;\n        },\n        put (key, value) {\n            entry = {\n                key,\n                value\n            };\n        },\n        getEntries () {\n            return entry ? [\n                entry\n            ] : [];\n        },\n        clear () {\n            entry = void 0;\n        }\n    };\n}\nfunction createLruCache(maxSize, equals) {\n    let entries = [];\n    function get(key) {\n        const cacheIndex = entries.findIndex((entry)=>equals(key, entry.key));\n        if (cacheIndex > -1) {\n            const entry = entries[cacheIndex];\n            if (cacheIndex > 0) {\n                entries.splice(cacheIndex, 1);\n                entries.unshift(entry);\n            }\n            return entry.value;\n        }\n        return NOT_FOUND;\n    }\n    function put(key, value) {\n        if (get(key) === NOT_FOUND) {\n            entries.unshift({\n                key,\n                value\n            });\n            if (entries.length > maxSize) {\n                entries.pop();\n            }\n        }\n    }\n    function getEntries() {\n        return entries;\n    }\n    function clear() {\n        entries = [];\n    }\n    return {\n        get,\n        put,\n        getEntries,\n        clear\n    };\n}\nvar referenceEqualityCheck = (a, b)=>a === b;\nfunction createCacheKeyComparator(equalityCheck) {\n    return function areArgumentsShallowlyEqual(prev, next) {\n        if (prev === null || next === null || prev.length !== next.length) {\n            return false;\n        }\n        const { length } = prev;\n        for(let i = 0; i < length; i++){\n            if (!equalityCheck(prev[i], next[i])) {\n                return false;\n            }\n        }\n        return true;\n    };\n}\nfunction lruMemoize(func, equalityCheckOrOptions) {\n    const providedOptions = typeof equalityCheckOrOptions === \"object\" ? equalityCheckOrOptions : {\n        equalityCheck: equalityCheckOrOptions\n    };\n    const { equalityCheck = referenceEqualityCheck, maxSize = 1, resultEqualityCheck } = providedOptions;\n    const comparator = createCacheKeyComparator(equalityCheck);\n    let resultsCount = 0;\n    const cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator);\n    function memoized() {\n        let value = cache.get(arguments);\n        if (value === NOT_FOUND) {\n            value = func.apply(null, arguments);\n            resultsCount++;\n            if (resultEqualityCheck) {\n                const entries = cache.getEntries();\n                const matchingEntry = entries.find((entry)=>resultEqualityCheck(entry.value, value));\n                if (matchingEntry) {\n                    value = matchingEntry.value;\n                    resultsCount !== 0 && resultsCount--;\n                }\n            }\n            cache.put(arguments, value);\n        }\n        return value;\n    }\n    memoized.clearCache = ()=>{\n        cache.clear();\n        memoized.resetResultsCount();\n    };\n    memoized.resultsCount = ()=>resultsCount;\n    memoized.resetResultsCount = ()=>{\n        resultsCount = 0;\n    };\n    return memoized;\n}\n// src/autotrackMemoize/autotrackMemoize.ts\nfunction autotrackMemoize(func) {\n    const node = createNode([]);\n    let lastArgs = null;\n    const shallowEqual = createCacheKeyComparator(referenceEqualityCheck);\n    const cache = createCache(()=>{\n        const res = func.apply(null, node.proxy);\n        return res;\n    });\n    function memoized() {\n        if (!shallowEqual(lastArgs, arguments)) {\n            updateNode(node, arguments);\n            lastArgs = arguments;\n        }\n        return cache.value;\n    }\n    memoized.clearCache = ()=>{\n        return cache.clear();\n    };\n    return memoized;\n}\n// src/weakMapMemoize.ts\nvar StrongRef = class {\n    constructor(value){\n        this.value = value;\n    }\n    deref() {\n        return this.value;\n    }\n};\nvar Ref = typeof WeakRef !== \"undefined\" ? WeakRef : StrongRef;\nvar UNTERMINATED = 0;\nvar TERMINATED = 1;\nfunction createCacheNode() {\n    return {\n        s: UNTERMINATED,\n        v: void 0,\n        o: null,\n        p: null\n    };\n}\nfunction weakMapMemoize(func, options = {}) {\n    let fnNode = createCacheNode();\n    const { resultEqualityCheck } = options;\n    let lastResult;\n    let resultsCount = 0;\n    function memoized() {\n        let cacheNode = fnNode;\n        const { length } = arguments;\n        for(let i = 0, l = length; i < l; i++){\n            const arg = arguments[i];\n            if (typeof arg === \"function\" || typeof arg === \"object\" && arg !== null) {\n                let objectCache = cacheNode.o;\n                if (objectCache === null) {\n                    cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();\n                }\n                const objectNode = objectCache.get(arg);\n                if (objectNode === void 0) {\n                    cacheNode = createCacheNode();\n                    objectCache.set(arg, cacheNode);\n                } else {\n                    cacheNode = objectNode;\n                }\n            } else {\n                let primitiveCache = cacheNode.p;\n                if (primitiveCache === null) {\n                    cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();\n                }\n                const primitiveNode = primitiveCache.get(arg);\n                if (primitiveNode === void 0) {\n                    cacheNode = createCacheNode();\n                    primitiveCache.set(arg, cacheNode);\n                } else {\n                    cacheNode = primitiveNode;\n                }\n            }\n        }\n        const terminatedNode = cacheNode;\n        let result;\n        if (cacheNode.s === TERMINATED) {\n            result = cacheNode.v;\n        } else {\n            result = func.apply(null, arguments);\n            resultsCount++;\n        }\n        terminatedNode.s = TERMINATED;\n        if (resultEqualityCheck) {\n            const lastResultValue = lastResult?.deref?.() ?? lastResult;\n            if (lastResultValue != null && resultEqualityCheck(lastResultValue, result)) {\n                result = lastResultValue;\n                resultsCount !== 0 && resultsCount--;\n            }\n            const needsWeakRef = typeof result === \"object\" && result !== null || typeof result === \"function\";\n            lastResult = needsWeakRef ? new Ref(result) : result;\n        }\n        terminatedNode.v = result;\n        return result;\n    }\n    memoized.clearCache = ()=>{\n        fnNode = createCacheNode();\n        memoized.resetResultsCount();\n    };\n    memoized.resultsCount = ()=>resultsCount;\n    memoized.resetResultsCount = ()=>{\n        resultsCount = 0;\n    };\n    return memoized;\n}\n// src/createSelectorCreator.ts\nfunction createSelectorCreator(memoizeOrOptions, ...memoizeOptionsFromArgs) {\n    const createSelectorCreatorOptions = typeof memoizeOrOptions === \"function\" ? {\n        memoize: memoizeOrOptions,\n        memoizeOptions: memoizeOptionsFromArgs\n    } : memoizeOrOptions;\n    const createSelector2 = (...createSelectorArgs)=>{\n        let recomputations = 0;\n        let dependencyRecomputations = 0;\n        let lastResult;\n        let directlyPassedOptions = {};\n        let resultFunc = createSelectorArgs.pop();\n        if (typeof resultFunc === \"object\") {\n            directlyPassedOptions = resultFunc;\n            resultFunc = createSelectorArgs.pop();\n        }\n        assertIsFunction(resultFunc, `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`);\n        const combinedOptions = {\n            ...createSelectorCreatorOptions,\n            ...directlyPassedOptions\n        };\n        const { memoize, memoizeOptions = [], argsMemoize = weakMapMemoize, argsMemoizeOptions = [], devModeChecks = {} } = combinedOptions;\n        const finalMemoizeOptions = ensureIsArray(memoizeOptions);\n        const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);\n        const dependencies = getDependencies(createSelectorArgs);\n        const memoizedResultFunc = memoize(function recomputationWrapper() {\n            recomputations++;\n            return resultFunc.apply(null, arguments);\n        }, ...finalMemoizeOptions);\n        let firstRun = true;\n        const selector = argsMemoize(function dependenciesChecker() {\n            dependencyRecomputations++;\n            const inputSelectorResults = collectInputSelectorResults(dependencies, arguments);\n            lastResult = memoizedResultFunc.apply(null, inputSelectorResults);\n            if (true) {\n                const { identityFunctionCheck, inputStabilityCheck } = getDevModeChecksExecutionInfo(firstRun, devModeChecks);\n                if (identityFunctionCheck.shouldRun) {\n                    identityFunctionCheck.run(resultFunc, inputSelectorResults, lastResult);\n                }\n                if (inputStabilityCheck.shouldRun) {\n                    const inputSelectorResultsCopy = collectInputSelectorResults(dependencies, arguments);\n                    inputStabilityCheck.run({\n                        inputSelectorResults,\n                        inputSelectorResultsCopy\n                    }, {\n                        memoize,\n                        memoizeOptions: finalMemoizeOptions\n                    }, arguments);\n                }\n                if (firstRun) firstRun = false;\n            }\n            return lastResult;\n        }, ...finalArgsMemoizeOptions);\n        return Object.assign(selector, {\n            resultFunc,\n            memoizedResultFunc,\n            dependencies,\n            dependencyRecomputations: ()=>dependencyRecomputations,\n            resetDependencyRecomputations: ()=>{\n                dependencyRecomputations = 0;\n            },\n            lastResult: ()=>lastResult,\n            recomputations: ()=>recomputations,\n            resetRecomputations: ()=>{\n                recomputations = 0;\n            },\n            memoize,\n            argsMemoize\n        });\n    };\n    Object.assign(createSelector2, {\n        withTypes: ()=>createSelector2\n    });\n    return createSelector2;\n}\nvar createSelector = /* @__PURE__ */ createSelectorCreator(weakMapMemoize);\n// src/createStructuredSelector.ts\nvar createStructuredSelector = Object.assign((inputSelectorsObject, selectorCreator = createSelector)=>{\n    assertIsObject(inputSelectorsObject, `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof inputSelectorsObject}`);\n    const inputSelectorKeys = Object.keys(inputSelectorsObject);\n    const dependencies = inputSelectorKeys.map((key)=>inputSelectorsObject[key]);\n    const structuredSelector = selectorCreator(dependencies, (...inputSelectorResults)=>{\n        return inputSelectorResults.reduce((composition, value, index)=>{\n            composition[inputSelectorKeys[index]] = value;\n            return composition;\n        }, {});\n    });\n    return structuredSelector;\n}, {\n    withTypes: ()=>createStructuredSelector\n});\n //# sourceMappingURL=reselect.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/reselect/dist/reselect.mjs\n");

/***/ })

};
;